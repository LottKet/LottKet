<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Product">

    <select id="checkIfEmptyDB" resultType="java.lang.Integer">
        select count(*)
        from product
    </select>

    <insert id="insertOneProduct" parameterType="lotte.com.lottket.dto.ProductDto">
        INSERT INTO product (producttitle, productcategory, productprice,
                             productstock, productregdate, producttotalrate)
        VALUES (#{productTitle}, #{productCategory}, #{productPrice},
                #{productStock}, #{productRegDate}, #{productTotalRate})
    </insert>

    <insert id="insertOneImage" parameterType="lotte.com.lottket.dto.ProductImageDto">
        INSERT INTO productimage (productid, productimageidx, productimageurl)
        VALUES (#{productId}, #{productImageIdx}, #{productImageUrl})
    </insert>

    <!-- productDto로 insert하기 -->
    <insert id="insertProduct" parameterType="lotte.com.lottket.dto.ProductDto" >
        INSERT INTO product
            (producttitle, productcategory, productprice, productstock, productregdate, producttotalrate)
        VALUES
            (#{productTitle}, #{productCategory}, #{productPrice}, #{productStock}, NOW(), #{productTotalRate});
    </insert>

    <!-- product update하기 -->
    <update id="updateProduct" parameterType="lotte.com.lottket.dto.ProductDto">
        UPDATE product
        SET producttitle=#{productTitle}, productcategory=#{productCategory}, productprice=#{productPrice}, productstock=#{productStock},
            productregdate=#{productRegdate}, producttotalrate=#{productTotalRate}
        WHERE productid=#{productId}
    </update>

    <!-- id로 product 삭제하기 -->
    <delete id="deleteProduct" parameterType="int">
        DELETE FROM product
        WHERE productid=#{productId}
    </delete>

    <!-- id로 product 갖고오기 -->
    <select id="selectProduct" resultType="lotte.com.lottket.dto.ProductDto">
        select *
        from product
        WHERE productid=#{productid}
    </select>

    <!-- 모두 갖고오기 -->
    <select id="selectProductAll">
        SELECT * FROM product
    </select>

    <!-- title으로 id 갖고오기 -->
    <select id="selectProductFind">
        SELECT productid FROM product
        WHERE producttitle=#{productTitle}
    </select>

    <!--id 갖고오기-->
    <select id="getId" parameterType="lotte.com.lottket.dto.ProductDto">
        SELECT productid FROM product
        WHERE producttitle=#{productTitle} AND productregdate=#{productRegdate}
    </select>

    <select id="findByProductId" parameterType="long" resultType="lotte.com.lottket.dto.ProductDto">
        select *
        from product
        where productid=#{productId}
    </select>

    <!-- 베스트 조회 -->
    <select id="selectBestProduct" resultType="lotte.com.lottket.dto.ProductImageDto">
        SELECT DISTINCT productimageurl, a.productid
        FROM productimage a, (SELECT DISTINCT productid, SUM(orderamount) as amount FROM orders
                               GROUP BY productid ORDER BY amount desc) b
        WHERE productimageidx = 1 LIMIT 20;
    </select>

    <!-- 주간 베스트 조회 -->
    <select id="selectWeeklyBestProduct" resultType="lotte.com.lottket.dto.ProductImageDto">
        SELECT DISTINCT a.productid, productimageurl
        FROM productimage a, (SELECT DISTINCT productid, SUM(orderamount) as amount, orderdate FROM orders
        WHERE orderdate BETWEEN DATE_SUB(NOW(), INTERVAL 7 DAY) AND NOW() GROUP BY productid ORDER BY amount desc) b
        WHERE productimageidx = 1 AND a.productid = b.productid LIMIT 20;
    </select>

    <!-- 신상품 조회 -->
    <select id="selectNewProduct" resultType="lotte.com.lottket.dto.ProductImageDto">
        SELECT a.productid, productimageurl
        FROM product a, productimage b
        WHERE a.productid=b.productid AND productimageidx = 1
        ORDER BY productregdate DESC
        LIMIT 20;
    </select>

    <update id="updateProductStock" parameterType="map">
        UPDATE product
        SET productstock=#{updateStock} where productid=#{productId}
    </update>

    <select id="findProductStock" parameterType="long" resultType="int">
        select productstock
        from product
        where productid=#{productId}

    </select>

    <!--id로 title갖고오기-->
    <select id="getTitle" parameterType="int" resultType="String">
        SELECT producttitle
        FROM product
        WHERE productid=#{productId}
    </select>
</mapper>